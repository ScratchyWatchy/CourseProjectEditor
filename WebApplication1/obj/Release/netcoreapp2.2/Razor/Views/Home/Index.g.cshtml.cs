#pragma checksum "C:\Users\akhruslov\Documents\PureJsEditor3\WebApplication1\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "316d1b69c14c59604fc7136bfca021fe288ab60f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Index.cshtml", typeof(AspNetCore.Views_Home_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\akhruslov\Documents\PureJsEditor3\WebApplication1\Views\_ViewImports.cshtml"
using WebApplication1;

#line default
#line hidden
#line 2 "C:\Users\akhruslov\Documents\PureJsEditor3\WebApplication1\Views\_ViewImports.cshtml"
using WebApplication1.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"316d1b69c14c59604fc7136bfca021fe288ab60f", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"729efaa87342638aecfe1a972ce9f9f8dff55b4c", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/pleaserotate.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("onload", new global::Microsoft.AspNetCore.Html.HtmlString("init()"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 25, true);
            WriteLiteral("<!DOCTYPE html>\r\n<html>\r\n");
            EndContext();
            BeginContext(25, 25192, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "316d1b69c14c59604fc7136bfca021fe288ab60f4231", async() => {
                BeginContext(31, 518, true);
                WriteLiteral(@"
    <meta charset=""UTF-8"">
    <title>Logic Circuit</title>
    <meta name=""description"" content=""A simple logic circuit editor and simulator."" />
    <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
    <!-- Copyright 1998-2019 by Northwoods Software Corporation. -->
    <script src=""https://gojs.net/latest/release/go-debug.js""></script>
    <script src=""https://gojs.net/latest/extensions/Figures.js""></script>
    <script src=""https://code.jquery.com/jquery-1.12.4.js""></script>
    ");
                EndContext();
                BeginContext(549, 45, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "316d1b69c14c59604fc7136bfca021fe288ab60f5144", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(594, 24616, true);
                WriteLiteral(@"
    <script id=""code"">


        var red = ""salmon"";  // 0 or false
        var green = ""palegreen"";  // 1 or true
        var purple = ""mistyrose"";
        var continious = true;

        function init() {

            var $ = go.GraphObject.make;  // for conciseness in defining templates

            myDiagram =
                $(go.Diagram, ""myDiagramDiv"",  // create a new Diagram in the HTML DIV element ""myDiagramDiv""
                    {
                        ""draggingTool.isGridSnapEnabled"": true,  // dragged nodes will snap to a grid of 10x10 cells
                        ""undoManager.isEnabled"": true
                    });

            // when the document is modified, add a ""*"" to the title and enable the ""Save"" button
            myDiagram.addDiagramListener(""Modified"", function (e) {
                var button = document.getElementById(""saveModel"");
                if (button) button.disabled = !myDiagram.isModified;
                var idx = document.title.indexOf(""*"")");
                WriteLiteral(@";
                if (myDiagram.isModified) {
                    if (idx < 0) document.title += ""*"";
                } else {
                    if (idx >= 0) document.title = document.title.substr(0, idx);
                }
            });

            var palette = new go.Palette(""palette"");  // create a new Palette in the HTML DIV element ""palette""
            var palette2 = new go.Palette(""palette2"");  // create a new Palette in the HTML DIV element ""palette""

            // creates relinkable Links that will avoid crossing Nodes when possible and will jump over other Links in their paths
            myDiagram.linkTemplate =
                $(go.Link,
                    {
                        routing: go.Link.AvoidsNodes,
                        curve: go.Link.JumpOver,
                        corner: 3,
                        relinkableFrom: true,
                        relinkableTo: true,
                        selectionAdorned:
                            false, // Links a");
                WriteLiteral(@"re not adorned when selected so that their color remains visible.
                        shadowOffset: new go.Point(0, 0),
                        shadowBlur: 8,
                        shadowColor: ""lightslategray""
                    },
                    new go.Binding(""isShadowed"", ""isSelected"").ofObject(),
                    $(go.Shape,
                        { name: ""SHAPE"", strokeWidth: 2, stroke: red }),
                    $(go.TextBlock,
                        { name: ""displayText"", margin: 5, segmentIndex: 1, segmentFraction: 0.2, segmentOffset: new go.Point(0, -10) },
                        new go.Binding(""text"", ""key"")));

            // node template helpers
            var sharedToolTip =
                $(""ToolTip"",
                    { ""Border.figure"": ""RoundedRectangle"" },
                    $(go.TextBlock, { margin: 2 },
                        new go.Binding(""text"", """", function (d) { return d.category; })));

            // define some common property settings
");
                WriteLiteral(@"            function nodeStyle() {
                return [new go.Binding(""location"", ""loc"", go.Point.parse).makeTwoWay(go.Point.stringify),
                new go.Binding(""isShadowed"", ""isSelected"").ofObject(),
                {
                    selectionAdorned: false,
                    shadowOffset: new go.Point(0, 0),
                    shadowBlur: 15,
                    shadowColor: ""lightslategray"",
                    toolTip: sharedToolTip
                }
                ];
            }

            function shapeStyle() {
                return {
                    name: ""NODESHAPE"",
                    fill: ""lightgray"",
                    stroke: ""darkslategray"",
                    desiredSize: new go.Size(40, 40),
                    strokeWidth: 2
                };
            }

            function shapeStyle2() {
                return {
                    name: ""NODESHAPE"",
                    fill: ""lightgray"",
                    stroke: ""darkslateg");
                WriteLiteral(@"ray"",
                    desiredSize: new go.Size(60, 40),
                    strokeWidth: 2
                };
            }

            function portStyle(input) {
                return {
                    desiredSize: new go.Size(6, 6),
                    fill: ""lightslategray"",
                    fromSpot: go.Spot.Right,
                    fromLinkable: !input,
                    toSpot: go.Spot.Left,
                    toLinkable: input,
                    toMaxLinks: 1,
                    cursor: ""pointer""
                };
            }

            // define templates for each type of node
            var inputTemplate =
                $(go.Node, ""Spot"", nodeStyle(),
                    $(go.Shape, ""Circle"", shapeStyle(),
                        { fill: red }),  // override the default fill (from shapeStyle()) to be red
                    $(go.Shape, ""Rectangle"", portStyle(false),  // the only port // some room around the text
                        // TextBlo");
                WriteLiteral(@"ck.text is bound to Node.data.key
                        { portId: """", alignment: new go.Spot(1, 0.5) }),
                    { // if double-clicked, an input node will change its value, represented by the color.
                        doubleClick: function (e, obj) {
                            e.diagram.startTransaction(""Toggle Input"");
                            var shp = obj.findObject(""NODESHAPE"");
                            shp.fill = (shp.fill === green) ? red : green;
                            updateStates();
                            e.diagram.commitTransaction(""Toggle Input"");
                        }
                    }

                );

            var outputTemplate =
                $(go.Node, ""Spot"", nodeStyle(),
                    $(go.Shape, ""Border"", shapeStyle2(),
                        { fill: green }),  // override the default fill (from shapeStyle()) to be green
                    $(go.Shape, ""Rectangle"", portStyle(true),  // the only port
            ");
                WriteLiteral(@"            { portId: """", alignment: new go.Spot(0, 0.5) }),
                    $(go.TextBlock, """",
                        {
                            name: ""data"",
                            wrap: go.TextBlock.None, margin: 2, width: 50,
                            isMultiline: false, editable: false, textAlign: 'center',
                            font: '10pt  Segoe UI,sans-serif', stroke: 'Black'
                        },
                        new go.Binding(""text"", ""data"").makeTwoWay())
                );

            var andTemplate =
                $(go.Node, ""Spot"", nodeStyle(),
                    $(go.Shape, ""AndGate"", shapeStyle()),
                    $(go.Shape, ""Rectangle"", portStyle(true),
                        { portId: ""in1"", alignment: new go.Spot(0, 0.3) }),
                    $(go.Shape, ""Rectangle"", portStyle(true),
                        { portId: ""in2"", alignment: new go.Spot(0, 0.7) }),
                    $(go.Shape, ""Rectangle"", portStyle(false),
     ");
                WriteLiteral(@"                   { portId: ""out"", alignment: new go.Spot(1, 0.5) })
                );

            var orTemplate =
                $(go.Node, ""Spot"", nodeStyle(),
                    $(go.Shape, ""OrGate"", shapeStyle()),
                    $(go.Shape, ""Rectangle"", portStyle(true),
                        { portId: ""in1"", alignment: new go.Spot(0.16, 0.3) }),
                    $(go.Shape, ""Rectangle"", portStyle(true),
                        { portId: ""in2"", alignment: new go.Spot(0.16, 0.7) }),
                    $(go.Shape, ""Rectangle"", portStyle(false),
                        { portId: ""out"", alignment: new go.Spot(1, 0.5) })
                );

            var xorTemplate =
                $(go.Node, ""Spot"", nodeStyle(),
                    $(go.Shape, ""XorGate"", shapeStyle()),
                    $(go.Shape, ""Rectangle"", portStyle(true),
                        { portId: ""in1"", alignment: new go.Spot(0.26, 0.3) }),
                    $(go.Shape, ""Rectangle"", portStyle(true),
 ");
                WriteLiteral(@"                       { portId: ""in2"", alignment: new go.Spot(0.26, 0.7) }),
                    $(go.Shape, ""Rectangle"", portStyle(false),
                        { portId: ""out"", alignment: new go.Spot(1, 0.5) })
                );

            var norTemplate =
                $(go.Node, ""Spot"", nodeStyle(),
                    $(go.Shape, ""NorGate"", shapeStyle()),
                    $(go.Shape, ""Rectangle"", portStyle(true),
                        { portId: ""in1"", alignment: new go.Spot(0.16, 0.3) }),
                    $(go.Shape, ""Rectangle"", portStyle(true),
                        { portId: ""in2"", alignment: new go.Spot(0.16, 0.7) }),
                    $(go.Shape, ""Rectangle"", portStyle(false),
                        { portId: ""out"", alignment: new go.Spot(1, 0.5) })
                );

            var xnorTemplate =
                $(go.Node, ""Spot"", nodeStyle(),
                    $(go.Shape, ""XnorGate"", shapeStyle()),
                    $(go.Shape, ""Rectangle"", portStyle(");
                WriteLiteral(@"true),
                        { portId: ""in1"", alignment: new go.Spot(0.26, 0.3) }),
                    $(go.Shape, ""Rectangle"", portStyle(true),
                        { portId: ""in2"", alignment: new go.Spot(0.26, 0.7) }),
                    $(go.Shape, ""Rectangle"", portStyle(false),
                        { portId: ""out"", alignment: new go.Spot(1, 0.5) })
                );

            var nandTemplate =
                $(go.Node, ""Spot"", nodeStyle(),
                    $(go.Shape, ""NandGate"", shapeStyle()),
                    $(go.Shape, ""Rectangle"", portStyle(true),
                        { portId: ""in1"", alignment: new go.Spot(0, 0.3) }),
                    $(go.Shape, ""Rectangle"", portStyle(true),
                        { portId: ""in2"", alignment: new go.Spot(0, 0.7) }),
                    $(go.Shape, ""Rectangle"", portStyle(false),
                        { portId: ""out"", alignment: new go.Spot(1, 0.5) })
                );

            var notTemplate =
                $");
                WriteLiteral(@"(go.Node, ""Spot"", nodeStyle(),
                    $(go.Shape, ""Inverter"", shapeStyle()),
                    $(go.Shape, ""Rectangle"", portStyle(true),
                        { portId: ""in"", alignment: new go.Spot(0, 0.5) }),
                    $(go.Shape, ""Rectangle"", portStyle(false),
                        { portId: ""out"", alignment: new go.Spot(1, 0.5) })
                );

            var oneTemplate =
                $(go.Node, ""Spot"", nodeStyle(),
                    $(go.Shape, ""Circle"", shapeStyle(),
                        { fill: purple }),  // override the default fill (from shapeStyle()) to be red
                    $(go.Shape, ""Rectangle"", portStyle(false),  // the only port
                        { portId: """", alignment: new go.Spot(1, 0.5) }),
                    $(go.TextBlock, ""1"",
                        {
                            name: ""data"",
                            wrap: go.TextBlock.None, margin: 2, width: 25,
                            isMultiline: false");
                WriteLiteral(@", editable: true, textAlign: 'center',
                            font: '10pt  Segoe UI,sans-serif', stroke: 'Black'
                        },
                        new go.Binding(""text"", ""data"").makeTwoWay())
                );

            var addTemplate =
                $(go.Node, ""Spot"", nodeStyle(),
                    $(go.Shape, ""SquareArrow"", shapeStyle()),
                    $(go.Shape, ""Rectangle"", portStyle(true),
                        { portId: ""in1"", alignment: new go.Spot(0, 0.3) }),
                    $(go.Shape, ""Rectangle"", portStyle(true),
                        { portId: ""in2"", alignment: new go.Spot(0, 0.7) }),
                    $(go.Shape, ""Rectangle"", portStyle(false),
                        { portId: ""out"", alignment: new go.Spot(1, 0.5) }),
                    $(go.TextBlock, ""+"",
                        {
                            wrap: go.TextBlock.None, width: 25,
                            isMultiline: false, editable: false, textAlign: 'center',");
                WriteLiteral(@"
                            font: '15pt  Segoe UI,sans-serif', stroke: 'Black'
                        },
                        new go.Binding(""text"", ""data"").makeTwoWay())
                );

            var multiplyTemplate =
                $(go.Node, ""Spot"", nodeStyle(),
                    $(go.Shape, ""Pointer"", shapeStyle()),
                    $(go.Shape, ""Rectangle"", portStyle(true),
                        { portId: ""in1"", alignment: new go.Spot(0, 0.3) }),
                    $(go.Shape, ""Rectangle"", portStyle(true),
                        { portId: ""in2"", alignment: new go.Spot(0, 0.7) }),
                    $(go.Shape, ""Rectangle"", portStyle(false),
                        { portId: ""out"", alignment: new go.Spot(1, 0.5) }),
                    $(go.TextBlock, ""x"",
                        {
                            wrap: go.TextBlock.None, width: 25,
                            isMultiline: false, editable: false, textAlign: 'left',
                            font: '15pt");
                WriteLiteral(@"  Segoe UI,sans-serif', stroke: 'Black'
                        },
                        new go.Binding(""text"", ""data"").makeTwoWay())
                );


            var divideTemplate =
                $(go.Node, ""Spot"", nodeStyle(),
                    $(go.Shape, ""Delay"", shapeStyle()),
                    $(go.Shape, ""Rectangle"", portStyle(true),
                        { portId: ""in1"", alignment: new go.Spot(0, 0.3) }),
                    $(go.Shape, ""Rectangle"", portStyle(true),
                        { portId: ""in2"", alignment: new go.Spot(0, 0.7) }),
                    $(go.Shape, ""Rectangle"", portStyle(false),
                        { portId: ""out"", alignment: new go.Spot(1, 0.5) }),
                    $(go.TextBlock, ""/"",
                        {
                            wrap: go.TextBlock.None, width: 25,
                            isMultiline: false, editable: false, textAlign: 'center',
                            font: '15pt  Segoe UI, bold, sans-serif', stroke: '");
                WriteLiteral(@"Black'
                        },
                        new go.Binding(""text"", ""data"").makeTwoWay())
                );

            var percentTemplate =
                $(go.Node, ""Spot"", nodeStyle(),
                    $(go.Shape, ""DoubleArrow"", shapeStyle()),
                    $(go.Shape, ""Rectangle"", portStyle(true),
                        { portId: ""in"", alignment: new go.Spot(0, 0.5) }),
                    $(go.Shape, ""Rectangle"", portStyle(false),
                        { portId: ""out"", alignment: new go.Spot(1, 0.5) }),
                    $(go.TextBlock, ""1"",
                        {
                            name: ""data"",
                            wrap: go.TextBlock.None, margin: 2, width: 25,
                            isMultiline: false, editable: true, textAlign: 'left',
                            font: '10pt  Segoe UI,sans-serif', stroke: 'Black'
                        },
                        new go.Binding(""text"", ""data"").makeTwoWay())
                );");
                WriteLiteral(@"


            // add the templates created above to myDiagram and palette
            myDiagram.nodeTemplateMap.add(""input"", inputTemplate);
            myDiagram.nodeTemplateMap.add(""output"", outputTemplate);
            myDiagram.nodeTemplateMap.add(""and"", andTemplate);
            myDiagram.nodeTemplateMap.add(""or"", orTemplate);
            myDiagram.nodeTemplateMap.add(""xor"", xorTemplate);
            myDiagram.nodeTemplateMap.add(""not"", notTemplate);
            myDiagram.nodeTemplateMap.add(""nand"", nandTemplate);
            myDiagram.nodeTemplateMap.add(""nor"", norTemplate);
            myDiagram.nodeTemplateMap.add(""xnor"", xnorTemplate);
            myDiagram.nodeTemplateMap.add(""one"", oneTemplate);
            myDiagram.nodeTemplateMap.add(""add"", addTemplate);
            myDiagram.nodeTemplateMap.add(""multiply"", multiplyTemplate);
            myDiagram.nodeTemplateMap.add(""divide"", divideTemplate);
            myDiagram.nodeTemplateMap.add(""percent"", percentTemplate);
            //");
                WriteLiteral(@" share the template map with the Palette
            palette.nodeTemplateMap = myDiagram.nodeTemplateMap;

            palette.model.nodeDataArray = [
                { category: ""input"" },
                { category: ""output"" },
                { category: ""and"" },
                { category: ""or"" },
                { category: ""xor"" },
                { category: ""not"" },
                { category: ""nand"" },
                { category: ""nor"" },
                { category: ""xnor"" }
            ];

            palette2.nodeTemplateMap = myDiagram.nodeTemplateMap;

            palette2.model.nodeDataArray = [
                { category: ""one"" },
                { category: ""output"" },
                { category: ""add"" },
                { category: ""multiply"" },
                { category: ""divide"" },
                { category: ""percent"" }
            ];

            // load the initial diagram
            load();

            // continually update the diagram
            loop()");
                WriteLiteral(@";
        }

        // update the diagram every 250 milliseconds
        function loop() {
            if (continious) {
                setTimeout(function () {
                    updateStates();
                    loop();
                },
                    250);
            }
            else {
                updateStates();
            }
        }

        // update the value and appearance of each node according to its type and input values
        function updateStates() {
            var oldskip = myDiagram.skipsUndoManager;
            myDiagram.skipsUndoManager = true;
            // do all ""input"" nodes first
            myDiagram.nodes.each(function (node) {
                if (node.category === ""input"") {
                    doInput(node);
                }
            });
            // now we can do all other kinds of nodes
            myDiagram.nodes.each(function (node) {
                switch (node.category) {
                    case ""and"": doAnd(node); ");
                WriteLiteral(@"break;
                    case ""or"": doOr(node); break;
                    case ""xor"": doXor(node); break;
                    case ""not"": doNot(node); break;
                    case ""nand"": doNand(node); break;
                    case ""nor"": doNor(node); break;
                    case ""xnor"": doXnor(node); break;
                    case ""output"": doOutput(node); break;
                    case ""one"": doOne(node); break;
                    case ""add"": doAdd(node); break;
                    case ""multiply"": doMult(node); break;
                    case ""divide"": doDivide(node); break;
                    case ""percent"": doPercent(node); break;
                    case ""input"": break;  // doInput already called, above
                }
            });
            myDiagram.skipsUndoManager = oldskip;
        }

        // helper predicate
        function linkIsTrue(link) {  // assume the given Link has a Shape named ""SHAPE""
            return link.findObject(""SHAPE"").stroke === gre");
                WriteLiteral(@"en;
        }

        // helper function for propagating results
        function setOutputLinks(node, color, intext) {
            node.findLinksOutOf().each(function (link) { link.findObject(""SHAPE"").stroke = color; link.findObject(""displayText"").text = intext; });
        }

        // update nodes by the specific function for its type
        // determine the color of links coming out of this node based on those coming in and node type

        function doInput(node) {
            // the output is just the node's Shape.fill
            setOutputLinks(node, node.findObject(""NODESHAPE"").fill);
        }

        function doAnd(node) {
            var color = node.findLinksInto().all(linkIsTrue) ? green : red;
            setOutputLinks(node, color);
        }

        function doNand(node) {
            var color = !node.findLinksInto().all(linkIsTrue) ? green : red;
            setOutputLinks(node, color);
        }
        function doNot(node) {
            var color = !node.fin");
                WriteLiteral(@"dLinksInto().all(linkIsTrue) ? green : red;
            setOutputLinks(node, color);
        }

        function doOr(node) {
            var color = node.findLinksInto().any(linkIsTrue) ? green : red;
            setOutputLinks(node, color);
        }
        function doNor(node) {
            var color = !node.findLinksInto().any(linkIsTrue) ? green : red;
            setOutputLinks(node, color);
        }

        function doXor(node) {
            var truecount = 0;
            node.findLinksInto().each(function (link) { if (linkIsTrue(link)) truecount++; });
            var color = truecount % 2 === 0 ? green : red;
            setOutputLinks(node, color);
        }
        function doXnor(node) {
            var truecount = 0;
            node.findLinksInto().each(function (link) { if (linkIsTrue(link)) truecount++; });
            var color = truecount % 2 !== 0 ? green : red;
            setOutputLinks(node, color);
        }

        function doOutput(node) {
            //");
                WriteLiteral(@" assume there is just one input link
            // we just need to update the node's Shape.fill
            node.linksConnected.each(function (link) { node.findObject(""data"").text = link.findObject(""displayText"").text; });
            node.linksConnected.each(function (link) { node.findObject(""NODESHAPE"").fill = link.findObject(""SHAPE"").stroke; });
        }

        function doOne(node) {
            var color = ""lightblue"";
            setOutputLinks(node, color, node.findObject(""data"").text);
        }


        function doAdd(node) {
            var additionResult = 0;
            node.findLinksInto().each(function (link) { additionResult += parseFloat(link.findObject(""displayText"").text) });
            //var addResult = toString(parseFloat(count[0].findObject(""displayText"").text) + parseFloat(count[1].findObject(""displayText"").text));
            var color = ""lightblue"";
            setOutputLinks(node, color, additionResult);
        }

        function doMult(node) {
            ");
                WriteLiteral(@"var additionResult = 1;
            node.findLinksInto().each(function (link) { additionResult *= parseFloat(link.findObject(""displayText"").text) });
            //var addResult = toString(parseFloat(count[0].findObject(""displayText"").text) + parseFloat(count[1].findObject(""displayText"").text));
            var color = ""lightblue"";
            setOutputLinks(node, color, additionResult);
        }

        function doDivide(node) {
            var additionResult = 0;
            var linkArray = node.findLinksInto();
            if (linkArray.count >= 2) {
                additionResult = parseFloat(linkArray.first().findObject(""displayText"").text);
                linkArray.next();
                var it = linkArray.iterator;
                additionResult /= it.value.findObject(""displayText"").text;
                //node.findLinksInto().each(function (link) { additionResult /= parseFloat(link.findObject(""displayText"").text) });
                //var addResult = toString(parseFloat(count[0].fi");
                WriteLiteral(@"ndObject(""displayText"").text) + parseFloat(count[1].findObject(""displayText"").text));
                var color = ""lightblue"";
            }
            setOutputLinks(node, color, additionResult);
        }

        function doPercent(node) {
            var result = node.findObject(""data"").text;
            result /= 100;
            node.findLinksInto().each(function (link) { result *= parseFloat(link.findObject(""displayText"").text) });
            var color = ""lightblue"";
            setOutputLinks(node, color, result);
        }

        // save a model to and load a model from JSON text, displayed below the Diagram
        function save() {
            document.getElementById(""mySavedModel"").value = myDiagram.model.toJson();
            myDiagram.isModified = false;
        }
        function load() {
            myDiagram.model = go.Model.fromJson(document.getElementById(""mySavedModel"").value);
        }

        function change() {
            continious = !continious;
       ");
                WriteLiteral("     loop();\r\n        }\r\n    </script>\r\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(25217, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(25219, 3267, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "316d1b69c14c59604fc7136bfca021fe288ab60f33160", async() => {
                BeginContext(25241, 3238, true);
                WriteLiteral(@"
    <div style=""width: 100%; display: flex; justify-content: space-between"">
        <div id=""palette"" style=""width: 100px; height: 700px; margin-right: 2px; background-color: whitesmoke; border: solid 1px black""></div>
        <div id=""palette2"" style=""width: 100px; height: 700px; margin-right: 2px; background-color: whitesmoke; border: solid 1px black""></div>
        <div id=""myDiagramDiv"" style=""flex-grow: 1; height: 700px; margin-bottom: 2px; border: solid 1px black""></div>
    </div>
    <div>
        <button id=""saveModel"" onclick=""save()"" style=""margin-bottom: 2px"">Save</button>
        <button onclick=""load()"" style=""margin-bottom: 2px"">Load</button>
        <button onclick=""change()"" style=""margin-bottom: 2px; color: red"">Loop</button>
        Diagram Model saved in JSON format:
    </div>
<textarea id=""mySavedModel"" style=""width:100%;height:900px"">
{ ""class"": ""GraphLinksModel"",
  ""linkFromPortIdProperty"": ""fromPort"",
  ""linkToPortIdProperty"": ""toPort"",
  ""nodeDataArray"": [ 
{""categ");
                WriteLiteral(@"ory"":""one"", ""key"":-10, ""loc"":""-330 -160""},
{""category"":""add"", ""key"":-11, ""loc"":""-200 -100""},
{""category"":""one"", ""key"":-9, ""loc"":""-360 -70""},
{""category"":""one"", ""key"":-12, ""loc"":""-290 60""},
{""category"":""one"", ""key"":-13, ""loc"":""-260 140""},
{""category"":""one"", ""key"":-14, ""loc"":""-30 80""},
{""category"":""add"", ""key"":-7, ""loc"":""20 -60""},
{""category"":""add"", ""key"":-8, ""loc"":""-110 0""},
{""category"":""add"", ""key"":-15, ""loc"":""180 -10""},
{""category"":""output"", ""key"":-2, ""loc"":""310 -10""},
{""category"":""multiply"", ""key"":-16, ""loc"":""-150 230""},
{""category"":""one"", ""key"":-17, ""loc"":""-300 210"", ""data"":""21""},
{""category"":""one"", ""key"":-18, ""loc"":""-290 260"", ""data"":""34""},
{""category"":""output"", ""key"":-19, ""loc"":""350 230""},
{""category"":""divide"", ""key"":-20, ""loc"":""40 210""},
{""category"":""one"", ""key"":-22, ""loc"":""-120 340"", ""data"":""3""},
{""category"":""input"", ""key"":-1, ""loc"":""-80 -210""},
{""category"":""and"", ""key"":-3, ""loc"":""40 -200""},
{""category"":""not"", ""key"":-6, ""loc"":""140 -130""},
{""category"":""output"", ""key"":-21, ""loc"":""250 -");
                WriteLiteral(@"200""},
{""category"":""percent"", ""key"":-23, ""loc"":""220 180"", ""data"":""77""}
 ],
  ""linkDataArray"": [ 
{""from"":-10, ""to"":-11, ""fromPort"":"""", ""toPort"":""in1""},
{""from"":-9, ""to"":-11, ""fromPort"":"""", ""toPort"":""in2""},
{""from"":-11, ""to"":-7, ""fromPort"":""out"", ""toPort"":""in1""},
{""from"":-12, ""to"":-8, ""fromPort"":"""", ""toPort"":""in1""},
{""from"":-13, ""to"":-8, ""fromPort"":"""", ""toPort"":""in2""},
{""from"":-8, ""to"":-7, ""fromPort"":""out"", ""toPort"":""in2""},
{""from"":-7, ""to"":-15, ""fromPort"":""out"", ""toPort"":""in1""},
{""from"":-15, ""to"":-2, ""fromPort"":""out"", ""toPort"":""""},
{""from"":-14, ""to"":-15, ""fromPort"":"""", ""toPort"":""in2""},
{""from"":-17, ""to"":-16, ""fromPort"":"""", ""toPort"":""in1""},
{""from"":-18, ""to"":-16, ""fromPort"":"""", ""toPort"":""in2""},
{""from"":-16, ""to"":-20, ""fromPort"":""out"", ""toPort"":""in1""},
{""from"":-22, ""to"":-20, ""fromPort"":"""", ""toPort"":""in2""},
{""from"":-3, ""to"":-6, ""fromPort"":""out"", ""toPort"":""in""},
{""from"":-6, ""to"":-3, ""fromPort"":""out"", ""toPort"":""in2""},
{""from"":-1, ""to"":-3, ""fromPort"":"""", ""toPort"":""in1""},
{""from"":-3, ""to"":-21, ""f");
                WriteLiteral("romPort\":\"out\", \"toPort\":\"\"},\r\n{\"from\":-20, \"to\":-23, \"fromPort\":\"out\", \"toPort\":\"in\"},\r\n{\"from\":-23, \"to\":-19, \"fromPort\":\"out\", \"toPort\":\"\"}\r\n ]}\r\n    </textarea>\r\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(28486, 443, true);
            WriteLiteral(@"
</html>


<style>
    /* style the elements with CSS */
    #pleaserotate-graphic {
        fill: #000;
    }

    #pleaserotate-backdrop {
        color: #aaa;
        background-color: #fff;
    }
</style>

<script>
    var portrait = window.innerWidth < window.innerHeight;
    var PleaseRotateOptions = {
        onlyMobile: false,
        forcePortrait: !portrait,
        allowClickBypass: false
    }

</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
